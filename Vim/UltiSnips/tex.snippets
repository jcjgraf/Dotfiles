global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet cenum "Compact Enumerate" b
\begin{compactenum}
	\item $0
\end{compactenum}
endsnippet

snippet citem "Compact Itemize" b
\begin{compactitem}
	\item $0
\end{compactitem}
endsnippet

snippet cdesc "Compact Description" b
\begin{compactdesc}
	\item[$1:] $0
\end{compactdesc}
endsnippet

snippet NN "n" i
\N
endsnippet

snippet RR "r" i
\R
endsnippet

snippet ZZ "z" i
\Z
endsnippet

snippet QQ "q" i
\Q
endsnippet

snippet CC "c" i
\C
endsnippet

snippet OO "emptyset" i
\O
endsnippet

context "math()"
snippet xx "cross" i
\times
endsnippet

context "math()"
snippet ** "cdot" i
\cdot
endsnippet

context "math()"
snippet !> "mapsto" i
\mapsto
endsnippet

context "math()"
snippet inn "in " i
\in
endsnippet

context "math()"
snippet <= "leq" i
\le
endsnippet

context "math()"
snippet >= "geq" i
\ge
endsnippet

context "math()"
snippet EE "geq" i
\exists
endsnippet

context "math()"
snippet AA "forall" i
\forall
endsnippet

context "math()"
snippet \\\ "setminus" i
\setminus
endsnippet

context "math()"
snippet set "set" w
\\{$1\\} $0
endsnippet

context "math()"
snippet and "and" w
\wedge
endsnippet

context "math()"
snippet or "or" w
\vee
endsnippet

snippet != "equals" i
\neq
endsnippet

context "math()"
snippet cc "subset" i
\subset
endsnippet

context "math()"
snippet ce "subset" i
\subseteq
endsnippet

context "math()"
snippet notin "not in " i
\not\in
endsnippet

context "math()"
snippet tt "text" i
\text{$1}$0
endsnippet

context "math()"
snippet () "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" i
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet -> "to" i
\to
endsnippet

snippet => "implies" i
\implies
endsnippet

context "math()"
snippet <-> "leftrightarrow" i
\leftrightarrow
endsnippet

context "math()"
snippet <=> "Leftrightarrow" i
\Leftrightarrow
endsnippet

context "math()"
snippet iff "iff" i
\iff
endsnippet

context "math()"
snippet ooo "\infty" i
\infty
endsnippet

context "math()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" i
^2
endsnippet

context "math()"
snippet cb "^3" i
^3
endsnippet

context "math()"
snippet td "to the ... power" i
^{$1}$0
endsnippet

snippet __ "subscript" i
_{$1}$0
endsnippet

context "math()"
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet liminf "liminf" w
\liminf_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet ca "cap" i
\cap
endsnippet

context "math()"
snippet cu "cup" i
\cup
endsnippet

context "math()"
snippet CU "bigcup" i
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet CA "bigcap" i
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet beg "begin{} / end{}" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

context "math()"
snippet ... "dots" i
\dots
endsnippet

context "math()"
snippet +- "plus minus" i
\pm
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet * "italics"
\textit{$0}
endsnippet

snippet ** "bold"
\textbf{$0}
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} $0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|ln|log|exp)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|pi)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet int "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}}\mathrm{d}x$0
endsnippet
