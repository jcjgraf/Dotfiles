global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet cenum "Compact Enumerate" bA
\begin{compactenum}
	\item $0
\end{compactenum}
endsnippet

snippet citem "Compact Itemize" bA
\begin{compactitem}
	\item $0
\end{compactitem}
endsnippet

snippet cdesc "Compact Description" bA
\begin{compactdesc}
	\item[$1:] $0
\end{compactdesc}
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet RR "r" iA
\R
endsnippet

snippet ZZ "z" iA
\Z
endsnippet

snippet QQ "q" iA
\Q
endsnippet

snippet CC "c" iA
\C
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet inn "in " iA
\in
endsnippet

context "math()"
snippet <= "leq" iA
\le
endsnippet

context "math()"
snippet >= "geq" iA
\ge
endsnippet

context "math()"
snippet EE "geq" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet and "and" wA
\wedge
endsnippet

context "math()"
snippet or "or" wA
\vee
endsnippet

snippet != "equals" iA
\neq
endsnippet

context "math()"
snippet cc "subset" iA
\subset
endsnippet

context "math()"
snippet ce "subset" iA
\subseteq
endsnippet

context "math()"
snippet notin "not in " iA
\not\in
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet -> "to" iA
\to
endsnippet

snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet <=> "Leftrightarrow" iA
\Leftrightarrow
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet liminf "liminf" w
\liminf_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet ca "cap" i
\cap
endsnippet

context "math()"
snippet cu "cup" i
\cup
endsnippet

context "math()"
snippet CU "bigcup" i
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet CA "bigcap" i
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

context "math()"
snippet ... "dots" iA
\dots
endsnippet

context "math()"
snippet +- "plus minus" iA
\pm
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet * "italics"
\textit{$0}
endsnippet

snippet ** "bold"
\textbf{$0}
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} $0
endsnippet
